.. Copyright 2013-2016 Reahl Software Services (Pty) Ltd. All rights reserved.

Internationalised applications
==============================

.. sidebar:: Examples in this section

   - tutorial.i18nexamplebootstrap

   Get a copy of an example by running:

   .. code-block:: bash

      reahl example <examplename>


The `tutorial.i18nexamplebootstrap` example changes :doc:`the simple
address book example <inputwidgets>` so that the user can select the
language displayed on the user interface. The chosen locale also
formats the display of dates.


.. sidebar:: Behind the scenes

   Reahl uses the `Babel <http://babel.pocoo.org//>`_
   internationalisation library to deal with translations and all other
   locale related customisations.

   Babel itself uses data regarding different locales that is derived
   from the `CLDR locale database <http://cldr.unicode.org/>`_.


Making your component translatable
----------------------------------

Add a |Menu| to choose a different locale
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Add a |Nav| containing all locales supported by your application to
the main |Navbar|. Call
:meth:`~reahl.web.bootstrap.navs.Nav.with_languages` to populates your
|Nav| with the available locales.

.. literalinclude:: ../../reahl/doc/examples/tutorial/i18nexamplebootstrap/i18nexamplebootstrap.py
   :pyobject: AddressBookPage


Mark strings as messages that need translation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create a global |Translator| in your module and assign it to the
variable name ``_`` (underscore):


.. literalinclude:: ../../reahl/doc/examples/tutorial/i18nexamplebootstrap/i18nexamplebootstrap.py
   :start-after: Declare a Translator for your component
   :end-before: class AddressBookPage

Wrap all strings destined for the user interface in a call to the
|Translator| similar to the brand text in AddressBookPage above.

Each ``_()`` call marks the relevant string so it can be found by
tools that search your source. These tools compile a catalogue of
strings that need translation. Translations for these messages are
added in the same catalogue.

When creating the |Translator|, pass it the name of the catalogue
where it should search for translations to strings wrapped in ``_()``.
By convention the catalogue is named the same as your component.

The Address class contains more examples:

.. literalinclude:: ../../reahl/doc/examples/tutorial/i18nexamplebootstrap/i18nexamplebootstrap.py
   :pyobject: Address


Dealing with plural messages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In some languages there are many distinct plural forms that differ
depending on the number of items you are talking about.

Use :meth:`~reahl.component.i18n.Translator.ngettext` for messages
that need plural translations. It takes the English singular and
plural form and returns the correct plural form for the target
language, given the number of items:

.. literalinclude:: ../../reahl/doc/examples/tutorial/i18nexamplebootstrap/i18nexamplebootstrap.py
   :pyobject: AddressBookPanel


Other customisations
~~~~~~~~~~~~~~~~~~~~

Many other things can be done differently, depending on the chosen
locale. For all of these things, you can use the `Babel
<http://babel.pocoo.org//>`_ library directly, usually passing it a
locale string which is obtainable from ``_.current_locale``.

Format the date inside an AddressBox for the current locale:

.. literalinclude:: ../../reahl/doc/examples/tutorial/i18nexamplebootstrap/i18nexamplebootstrap.py
   :pyobject: AddressBox


Making it possible for others to translate your component
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create the `i18nexamplebootstrapmessages` package in the top level directory of
the example (don't forget the __init__.py). It will house your message
catalogue. List it in your `.reahlproject`:

.. literalinclude:: ../../reahl/doc/examples/tutorial/i18nexamplebootstrap/.reahlproject
   :start-after: <project type="egg">
   :end-before: <deps purpose="run">

Once your "translations" package is ready, extract the catalogue from
your source code by running:

.. code-block:: bash

   reahl extractmessages

This stores your original messages inside
i18nexamplebootstrapmessages/i18nexamplebootstrap.


.. note::

   Remember to run ``reahl setup -- develop -N`` after changing
   the `.reahlproject` file.



Add translated messages
~~~~~~~~~~~~~~~~~~~~~~~

Add the `af` locale to i18nexamplebootstrap by running (from the i18nexamplebootstrap directory):

.. code-block:: bash

   reahl addlocale af i18nexamplebootstrap

This creates the file
`i18nexamplebootstrap/af/LC_MESSAGES/i18nexamplebootstrap.po` which
you must edit to supply the translated versions for the `af` locale.

Once done, compile the catalogue so that it can be used by a running
application:

.. code-block::

   reahl compiletranslations


Add translated messages for a different component
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Supplying translations to another component
-------------------------------------------

.. warning::

   A Reahl application only supports a given locale if all the
   components it uses also support that locale. Hence, when adding
   a new locale that is not supported by Reahl itself, you will have
   to provide the translations for your new locale for all of the
   Reahl components as well! Luckily you can do that easily, in your
   own component.


At this point, our example is translatable. That means that anyone can
make it support a new locale by adding translations of our user
messages to the natural language of the needed locale. These new
translations can be added in a totally different component without
touching the original component at all, but nothing prevents us from
adding a set of translations in the original component either.

In this example, the latter approach is taken because it keeps
everything nicely together in a single egg, simplifying our example
infrastructure somewhat. Whether you choose to provide translations
inside the original component, or in a different one, the process is
the same.

If you do provide translations for egg A in egg B, it is advisable to
let egg B depend on the particular version of egg A for which it
provides translations. Different versions of egg A may have a
different set of user messages to translate, meaning different
versions of your egg B!

Also, you can only provide translations in a component once you have
notified the Reahl component infrastructure in which package to look
for language catalogues in your component. Since we have already added
a ``<translations>`` tag to the `.reahlproject` file of `i18nexample`
this has already been taken care of.



Maintaining translations
~~~~~~~~~~~~~~~~~~~~~~~~

Software keeps changing. Chances are that newer versions of a
component for which you provide translations may contain a different
list of user messages than it had in a previous version. When this
happens the bulk of the messages already translated usually stay
unchanged, with a change or a new message here and there.

Running the following command updates all existing translations found
in the "translations" package of the current component, merging new
changes into the set of translations you already have::

  reahl mergetranslations




